<project default="reports" name="jenins-test">
  <property override="true" name="basedir" value="."></property>
  <property override="true" name="codedir" value="${basedir}/src/modules/custom/"></property>
  <property override="true" name="reportsdir" value="${basedir}/build/reports"></property>
  <property override="true" name="excludedir" value="vendor,build/"></property>
  <property override="true" name="phplocdir" value="${reportsdir}/phploc"></property>
  <property override="true" name="phpcpddir" value="${reportsdir}/phpcpd"></property>
  <property override="true" name="phpmddir" value="${reportsdir}/phpmd"></property>
  <property override="true" name="phpunitdir" value="${reportsdir}/phpunit"></property>
  <property override="true" name="phpcsdir" value="${reportsdir}/phpcs"></property>
  <target name="metrics" description="Software Metrics Generation">
    <trycatch>
      <try>
        <echo msg="Starting phploc"></echo>
        <delete quiet="true" dir="${phplocdir}"></delete>
        <mkdir dir="${phplocdir}"></mkdir>
        <echo msg="Starting phploc parsing [this may take a few seconds]"></echo>
        <exec checkreturn="false" executable="${basedir}/vendor/bin/phploc">
          <arg value="--exclude"></arg>
          <arg value="${excludedir}"></arg>
          <arg path="${codedir}"></arg>
          <arg value=">${phplocdir}/output.txt"></arg>
        </exec>
        <echo msg="phploc build finished"></echo>
      </try>
      <catch>
	<fail message="phploc is not installed.  Run 'composer install to install all dependencies from the composer.json'" />
      </catch>
    </trycatch>
  </target>
  <target depends="metrics" name="quality" description="Code Quality Measurements">
    <trycatch property="phpcsinstalled">
      <try>
        <exec checkreturn="true" executable="./vendor/bin/phpcs">
          <arg value="--version"></arg>
        </exec>
      </try>
      <catch></catch>
    </trycatch>
    <if>
      <contains substring="with code 127" string="${phpcsinstalled}"></contains>
      <then>
	<fail message="phpcs is not installed.  Run 'composer install to install all dependencies from the composer.json'" />
      </then>
      <else>
        <echo msg="Starting phpcs"></echo>
        <delete quiet="true" dir="${phpcsdir}"></delete>
        <mkdir dir="${phpcsdir}"></mkdir>
        <echo msg="Starting phpcs parsing."></echo>
        <trycatch>
          <try>
            <exec logoutput="true" checkreturn="true" executable="./vendor/bin/phpcs">
              <arg value="--config-set"></arg>
              <arg value="installed_paths"></arg>
              <arg value="vendor/drupal/coder/coder_sniffer"></arg>
            </exec>
            <exec logoutput="true" checkreturn="true" executable="./vendor/bin/phpcs" outputProperty="phpcs.status">
              <arg path="${codedir}"></arg>
              <arg value="--standard=Drupal"></arg>
              <arg value="--report-full=${phpcsdir}/output.txt"></arg>
            </exec>
          </try>
          <catch>
	    <fail message="phpcs build failed. Please check build/reports/phpcs/output.txt for more information" />
          </catch>
        </trycatch>
        <echo msg="phpcs build finished"></echo>
      </else>
    </if>
    <trycatch>
      <try>
        <echo msg="Starting phpcpd"></echo>
        <delete quiet="true" dir="${phpcpddir}"></delete>
        <mkdir dir="${phpcpddir}"></mkdir>
        <echo msg="Starting phpcpd parsing."></echo>
        <exec checkreturn="false" executable="./vendor/bin/phpcpd">
          <arg value="--exclude"></arg>
          <arg value="${excludedir}"></arg>
          <arg path="${codedir}"></arg>
          <arg value=">${phpcpddir}/output.txt"></arg>
        </exec>
        <echo msg="phpcpd build finished"></echo>
      </try>
      <catch>
        <fail message="phpcpd build failed. Please check build/reports/phpcpd/output.txt fore more information" />
      </catch>
    </trycatch>
    <trycatch property="phpmdinstalled">
      <try>
        <exec checkreturn="false" command="./vendor/bin/phpmd"></exec>
      </try>
      <catch></catch>
    </trycatch>
    <if>
      <contains substring="with code 127" string="${phpmdinstalled}"></contains>
      <then>
        <echo msg="phpmd is not installed.  Run pear channel-discover pear.phpmd.org, pear channel-discover pear.pdepend.org, pear install --alldeps phpmd/PHP_PMD. Ignore phpize warning." level="warning"></echo>
      </then>
      <else>
        <echo msg="Starting phpmd"></echo>
        <delete quiet="true" dir="${phpmddir}"></delete>
        <mkdir dir="${phpmddir}"></mkdir>
        <echo msg="Starting phpmd parsing"></echo>
        <trycatch>
          <try>
            <exec logoutput="true" checkreturn="true" executable="./vendor/bin/phpmd">
              <arg path="${codedir}"></arg>
              <arg value="text"></arg>
              <arg value="codesize,controversial,design,naming"></arg>
              <arg value="--reportfile"></arg>
              <arg value="${phpmddir}/output.txt"></arg>
              <arg value="--exclude"></arg>
              <arg value="${excludedir}"></arg>
            </exec>
          </try>
          <catch>
            <fail message="phpmd build failed. Please check build/reports/phpmd/output.txt fore more information" />
          </catch>
        </trycatch>
        <echo msg="phpmd build finished"></echo>
      </else>
    </if>
    <delete quiet="true" dir="${phpunitdir}"></delete>
    <mkdir dir="${phpunitdir}"></mkdir>
    <echo msg="Starting phpunit parsing"></echo>
        <trycatch>
          <try>
            <exec logoutput="true" checkreturn="true" executable="./vendor/bin/phpunit">
              <arg path="${basedir}/test_cases/phpunit"></arg>
              <arg value="--coverage-text"></arg>
              <arg value="${phpunitdir}/output.txt"></arg>
              <arg value="--exclude"></arg>
              <arg value="${excludedir}"></arg>
            </exec>
          </try>
          <catch></catch>
        </trycatch>

    <echo msg="phpunit finished"></echo>
  </target>
  <target depends="quality" name="reports" description="Should be ran to launch all report generation"></target>
  <target name="build" description="Used to build application">
    <echo msg="Starting Build"></echo>
    <echo msg="Build Finished."></echo>
  </target>
  <target name="help" description="Shows help for this task">
    <echo msg="Help for this Phing Taskset"></echo>
    <exec logoutput="true" executable="phing">
      <arg value="-l"></arg>
    </exec>
  </target>
</project>
